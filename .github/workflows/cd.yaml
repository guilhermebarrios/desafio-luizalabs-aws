name: CD - Deploy da App HelloWorld no EKS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hello
  EKS_CLUSTER_NAME: cluster-luizalabs

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v3

    - name: Configura credenciais AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::288761731142:role/github-desafio-role
        aws-region: ${{ env.AWS_REGION }}

    # 1. Instala Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    # 2. Inicializa Terraform
    - name: Terraform Init
      run: terraform init ./infra

    # 3. Aplica Terraform (cria ECR, EKS etc)
    - name: Terraform Apply
      run: terraform apply -auto-approve ./infra

    # 4. Faz login no Amazon ECR
    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 5. Build, tag e push da imagem Docker
    - name: Build e Push Docker
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # 6. Configura kubectl para EKS
    - name: Configura kubectl para o EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    # 7. Deploy no Kubernetes
    - name: Deploy no Kubernetes
      run: |
        export KUBE_DEPLOYMENT_FILE=./kubernetes/deployment.yaml
        sed -i 's|image:.*|image: ${{ steps.build-image.outputs.image_uri }}|g' $KUBE_DEPLOYMENT_FILE
        kubectl apply -f ./kubernetes/
