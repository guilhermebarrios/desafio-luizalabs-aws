# .github/workflows/cd.yml
name: CD - Deploy da Aplicação HelloWorld no EKS

on:
  push:
    # a 'trigger' será o push na main
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hello
  EKS_CLUSTER_NAME: cluster-desafio-luizalabs-v2

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configura credenciais AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag e push da imagem Docker
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Configura kubectl para o EKS
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
       
    - name: Deploy no Kubernetes
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image_uri }}
      run: |
        # Comando imperativo para atualizar a imagem e iniciar o rollout
        kubectl set image deployment/hello hello=$IMAGE_URI

        # Monitorar o status do deploy e garantir que ele terminou com sucesso
        # A pipeline só continuará depois que os novos pods estiverem 'Running'.
        kubectl rollout status deployment/hello

