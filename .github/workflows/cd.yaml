# .github/workflows/cd.yml
name: CD - Deploy da Aplicação HelloWorld no EKS

on:
  push:
    # a 'trigger' será o push na main
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hello
  EKS_CLUSTER_NAME: cluster-desafio-luizalabs

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configura credenciais AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # arn da function criada no IAM
        role-to-assume: arn:aws:iam::288761731142:role/github-desafio-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag e push da imagem Docker
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Adicionando --no-cache para forçar a reinstalação das dependências do requirements.txt
        docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Configura kubectl para o EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy no Kubernetes
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image_uri }}
      run: |
        KUBE_DEPLOYMENT_FILE=./k8s/deployment.yaml
        sed -i "s|image:.*|image: $IMAGE_URI|g" $KUBE_DEPLOYMENT_FILE
        kubectl apply -f ./k8s/