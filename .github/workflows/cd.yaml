# Nome do workflow que aparecerá no GitHub
name: CD - Deploy da Aplicação HelloWorld no EKS

# Gatilho: Rodar apenas quando houver um push na branch 'main'
on:
  push:
    branches: [ main ]

# Variáveis de ambiente para facilitar a manutenção
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hello # Nome do seu repositório no ECR
  EKS_CLUSTER_NAME: cluster-luizalabs # Nome do seu cluster EKS

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Permissões necessárias para o GitHub se autenticar na AWS via OIDC
    permissions:
      id-token: write
      contents: read

    steps:
    # 1. Checkout do código do seu repositório
    - name: Checkout do código
      uses: actions/checkout@v3

    # 2. Configura as credenciais da AWS de forma segura (OIDC)
    - name: Configura credenciais AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # Você precisará criar este papel no IAM da AWS
        role-to-assume: arn:aws:iam::288761731142:role/github-desafio-role
        aws-region: ${{ env.AWS_REGION }}

    # 3. Faz o login no Amazon ECR (o "Docker Hub" da AWS)
    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 4. Build, tag e push da imagem Docker para o ECR
    - name: Build, tag, e push da imagem para o ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # A tag da imagem será o hash do commit, para ser única
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # 5. Configura o kubectl para se conectar ao seu cluster EKS
    - name: Configura o kubectl para o EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    # 6. Deploy no Kubernetes
    - name: Deploy no Kubernetes
      run: |
        # Pega o arquivo de deployment original
        export KUBE_DEPLOYMENT_FILE=./kubernetes/deployment.yaml
        # Usa o comando 'sed' para substituir a linha da imagem pela URI da nova imagem que acabamos de criar
        sed -i 's|image:.*|image: ${{ steps.build-image.outputs.image_uri }}|g' $KUBE_DEPLOYMENT_FILE
        
        # Finalmente, aplica os manifestos (deployment e service) no cluster
        kubectl apply -f ./kubernetes/